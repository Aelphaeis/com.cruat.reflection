package jmo.reflection.core;

import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.net.URL;
import java.security.ProtectionDomain;

public interface JClass<T> {
	 String toGenericString();
	 T newInstance();
	 boolean isInstance(Object obj);
	 boolean isAssignableFrom(Class<?> cls);
	 boolean isInterface();
	 boolean isArray();
	 boolean isAnnotation();
	 boolean isSynthetic();
	 String getName();
	 ClassLoader getClassLoader();
	 TypeVariable<Class<T>>[] getTypeParameters();
	 Class<? super T> getSuperclass();
	 Type getGenericSuperclass();
	 Package getPackage();
	 Class<?>[] getInterfaces();
	 Type[] getGenericInterfaces();
	 Class<?> getComponentType();
	 int getModifiers();
	 Object[] getSigners();
	 Method getEnclosingMethod();
	 Constructor<?> getEnclosingConstructor();
	 Class<?> getDeclaringClass();
	 Class<?> getEnclosingClass();
	 String getSimpleName();
	 String getTypeName();
	 String getCanonicalName();
	 boolean isAnonymousClass();
	 boolean isLocalClass();
	 boolean isMemberClass();
	 Class<?>[] getClasses();
	 Field[] getFields();
	 Method[] getMethods();
	 Constructor<?>[] getConstructors();
	 Field getField(String name);
	 Method getMethod(String name, Class<?>... parameterTypes);
	 Constructor<T> getConstructor(Class<?>... parameterTypes);
	 Class<?>[] getDeclaredClasses();
	 Field[] getDeclaredFields();
	 Method[] getDeclaredMethods();
	 Constructor<?>[] getDeclaredConstructors();
	 Field getDeclaredField(String name);
	 Method getDeclaredMethod(String name, Class<?>... parameterTypes);
	 Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes);
	 InputStream getResourceAsStream(String name);
	 URL getResource(String name);
	 ProtectionDomain getProtectionDomain();
	 boolean desiredAssertionStatus();
	 boolean isEnum();
	 T[] getEnumConstants();
	 T cast(Object obj);
	 <U> Class<? extends U> asSubclass(Class<U> clazz);
	 <A extends Annotation> A getAnnotation(Class<A> anno);
	 boolean isAnnotationPresent(Class<? extends Annotation> anno);
	 <A extends Annotation> A[] getAnnotationsByType(Class<A> anno);
	 Annotation[] getAnnotations();
	 <A extends Annotation> A getDeclaredAnnotation(Class<A> anno);
	 <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> anno);
	 Annotation[] getDeclaredAnnotations();
	 AnnotatedType getAnnotatedSuperclass();
	 AnnotatedType[] getAnnotatedInterfaces();
}
